diff --git a/mage/main_test.go b/mage/main_test.go
--- a/mage/main_test.go
+++ b/mage/main_test.go
@@ -1384,60 +1384,6 @@ func TestGoCmd(t *testing.T) {
 
 var runtimeVer = regexp.MustCompile(`go1\.([0-9]+)`)
 
-func TestGoModules(t *testing.T) {
-	resetTerm()
-	matches := runtimeVer.FindStringSubmatch(runtime.Version())
-	if len(matches) < 2 || minorVer(t, matches[1]) < 11 {
-		t.Skipf("Skipping Go modules test because go version %q is less than go1.11", runtime.Version())
-	}
-	dir, err := ioutil.TempDir("", "")
-	if err != nil {
-		t.Fatal(err)
-	}
-	defer os.RemoveAll(dir)
-	err = ioutil.WriteFile(filepath.Join(dir, "magefile.go"), []byte(`//+build mage
-
-package main
-
-import "golang.org/x/text/unicode/norm"
-
-func Test() {
-	print("unicode version: " + norm.Version)
-}
-`), 0600)
-	if err != nil {
-		t.Fatal(err)
-	}
-
-	stdout := &bytes.Buffer{}
-	stderr := &bytes.Buffer{}
-	cmd := exec.Command("go", "mod", "init", "app")
-	cmd.Dir = dir
-	cmd.Env = os.Environ()
-	cmd.Stderr = stderr
-	cmd.Stdout = stdout
-	if err := cmd.Run(); err != nil {
-		t.Fatalf("Error running go mod init: %v\nStdout: %s\nStderr: %s", err, stdout, stderr)
-	}
-	stderr.Reset()
-	stdout.Reset()
-	code := Invoke(Invocation{
-		Dir:    dir,
-		Stderr: stderr,
-		Stdout: stdout,
-	})
-	if code != 0 {
-		t.Fatalf("exited with code %d. \nStdout: %s\nStderr: %s", code, stdout, stderr)
-	}
-	expected := `
-Targets:
-  test    
-`[1:]
-	if output := stdout.String(); output != expected {
-		t.Fatalf("expected output %q, but got %q", expected, output)
-	}
-}
-
 func minorVer(t *testing.T, v string) int {
 	a, err := strconv.Atoi(v)
 	if err != nil {
